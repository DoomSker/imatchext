# vim: set ts=8 sts=2 sw=2 tw=99 et ft=python:
import os
import shutil

# This is where the files will be output to
# package is the default
builder.SetBuildFolder('package')

# Add any folders you need to this list
folder_list = [
  'addons/sourcemod/extensions',
  'addons/sourcemod/gamedata',
  'addons/sourcemod/scripting',
  'addons/sourcemod/scripting/include',
  'addons/sourcemod/translations',
]

lang_folder_list = next(os.walk(os.path.join(builder.sourcePath, 'extra/translations')))[1]
folder_list += map(lambda dir: os.path.join('addons/sourcemod/translations', dir), lang_folder_list)

# Create the distribution folder hierarchy.
folder_map = {}
for folder in folder_list:
  norm_folder = os.path.normpath(folder)
  folder_map[folder] = builder.AddFolder(norm_folder)

# Do all straight-up file copies from the source tree.
def CopyFiles(src, dest, files):
  if not dest:
    dest = src
  dest_entry = folder_map[dest]
  for source_file in files:
    source_path = os.path.join(builder.sourcePath, src, source_file)
    builder.AddCopy(source_path, dest_entry)

# Gamedata file
CopyFiles('extra', 'addons/sourcemod/gamedata',
 [ 'imatchext.txt' ]
)

# Autoload file
CopyFiles('extra', 'addons/sourcemod/extensions',
 [ 'imatchext.autoload' ]
)

# Example file
CopyFiles('extra/scripting', 'addons/sourcemod/scripting',
 [ 'test_imatchext.sp', ]
)

# Include file
CopyFiles('extra/scripting/include', 'addons/sourcemod/scripting/include',
 [ 'imatchext.inc', ]
)

# Generated translations
target_folder = os.path.join(builder.buildFolder, 'addons/sourcemod/translations')
if os.path.isdir(target_folder):
  shutil.rmtree(target_folder)

shutil.copytree(
  os.path.join(builder.sourcePath, 'extra/translations'),
  target_folder,
)

# Copy binaries.
for cxx_task in Extension.extensions:
  builder.AddCopy(cxx_task.binary, folder_map['addons/sourcemod/extensions'])
